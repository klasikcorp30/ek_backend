// <auto-generated />
using System;
using Ekklesia.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ekklesia.Api.Migrations
{
    [DbContext(typeof(EkklesiaDbContext))]
    [Migration("20251015005847_InitialMySQLMigration")]
    partial class InitialMySQLMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("Ekklesia.Api.Models.Church", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Denomination")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceSchedule")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Denomination");

                    b.HasIndex("IsActive");

                    b.HasIndex("State");

                    b.HasIndex("Status");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("Latitude", "Longitude");

                    b.ToTable("Churches");
                });

            modelBuilder.Entity("Ekklesia.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 15, 0, 58, 47, 389, DateTimeKind.Utc).AddTicks(8110),
                            Email = "admin@ekklesia.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = "$2a$11$f3zMKLFSrONNu3jDh4qydeIuIQubhgtQhZcbhoZzrMramSQ3D41yG",
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 10, 15, 0, 58, 47, 389, DateTimeKind.Utc).AddTicks(8300)
                        });
                });

            modelBuilder.Entity("Ekklesia.Api.Models.Church", b =>
                {
                    b.HasOne("Ekklesia.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ekklesia.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .HasPrincipalKey("Email")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ekklesia.Api.Models.User", null)
                        .WithMany("CreatedChurches")
                        .HasForeignKey("UserId");

                    b.HasOne("Ekklesia.Api.Models.User", null)
                        .WithMany("UpdatedChurches")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Ekklesia.Api.Models.User", b =>
                {
                    b.Navigation("CreatedChurches");

                    b.Navigation("UpdatedChurches");
                });
#pragma warning restore 612, 618
        }
    }
}
